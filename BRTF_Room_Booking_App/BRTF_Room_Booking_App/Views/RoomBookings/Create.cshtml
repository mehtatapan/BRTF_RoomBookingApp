@model BRTF_Room_Booking_App.Models.RoomBooking

@{ ViewData["Title"] = "Create Booking"; }

<body style="background-color:#E4E6E6" class="align-items-center text-center justify-content-center">
    <div class="container">
    <br />
    <h1 class="mb-4">Book a Room</h1>
    <br />

    <section style="background-color: #FFF;display: block; border-radius: 8px; box-shadow: 0 15px 25px rgba(0,0,50,0.2); padding:5%;" class="booking_block align-items-center text-center justify-content-center">

        @if (TempData["TimeConflictedBookings"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Time conflict:</b> Your Booking times overlap with the following existing Bookings.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Room</th>
                        @:<th colspan='4'>Your Bookings</th>
                        @:<th style="width: 4%;"></th> @* Space between User bookings and Existing bookings *@
                        @:<th colspan='5'>Existing Bookings</th>
                    @:</tr>
                    @:<tr>
                        @:<th></th>
                        @:<th>Start&nbsp;Date</th>
                        @:<th>Start&nbsp;Time</th>
                        @:<th>End&nbsp;Date</th>
                        @:<th>End&nbsp;Time</th>
                        @:<th></th>
                        @:<th>Start&nbsp;Date</th>
                        @:<th>Start&nbsp;Time</th>
                        @:<th>End&nbsp;Date</th>
                        @:<th>End&nbsp;Time</th>
                        @:<th>Booked For</th>
                    @:</tr>

                    List<RoomBooking> yourBookings = TempData["YourBookings"] as List<RoomBooking>;
                    List<RoomBooking> conflictBookings = TempData["TimeConflictedBookings"] as List<RoomBooking>;
                    int yourBookingsCount = yourBookings.Count;

                    string previousRoomName = yourBookings[0].Room.RoomName;  // Used to bold text where the room name changes

                    for (int i = 0; i < yourBookingsCount; i++)
                    {
                        if (yourBookings[i].Room.RoomName != previousRoomName)
                        {
                            @:<tr><td>&nbsp;</td></tr>
                            previousRoomName = yourBookings[i].Room.RoomName;
                        }
                        @:<tr>
                            @:<td>@(Html.Raw(yourBookings[i].Room.RoomName))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortDateString()))</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortTimeString()))</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortDateString()))</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortTimeString()))</td>
                            @:<td></td>
                            if (conflictBookings[i] != null)
                            {
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortDateString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortTimeString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortDateString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortTimeString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].User.FullName))</td>
                            }
                            else
                            {
                                @:<td></td>
                                @:<td colspan='4'>(no conflict)</td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["AreaHoursViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Maximum Area hours violation:</b> Your new Booking exceeds the maximum hours you are allowed to book for these Areas.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Area</th>
                        @:<th>Your Existing Hours</th>
                        @:<th>Hours Added By New Booking</th>
                        @:<th>Your New Total</th>
                        @:<th>Max Allowed Total</th>
                        @:<th></th>
                    @:</tr>

                    List<IDictionary<string, string>> hourViolations = TempData["AreaHoursViolation"] as List<IDictionary<string, string>>;
                    int hourViolationsCount = hourViolations.Count;

                    for (int i = 0; i < hourViolationsCount; i++)
                    {
                        @:<tr>
                            @:<td>@(Html.Raw(hourViolations[i]["AreaName"]))&nbsp;</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["ExistingHoursForArea"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewHoursForArea"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewTotalHoursForArea"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["MaxHoursForArea"]).ToString("0.##"))) hours</td>
                            if (Convert.ToDouble(hourViolations[i]["NewTotalHoursForArea"]) > Convert.ToDouble(hourViolations[i]["MaxHoursForArea"]))
                            {
                                @:<td><b>Exceeds Max</b></td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["RoomHoursViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Maximum Room hours violation:</b> Your new Booking exceeds the maximum hours you are allowed to book for these Rooms.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Room</th>
                        @:<th>Your Existing Hours</th>
                        @:<th>Hours Added By New Booking</th>
                        @:<th>Your New Total</th>
                        @:<th>Max Allowed Total</th>
                        @:<th></th>
                    @:</tr>

                    List<IDictionary<string, string>> hourViolations = TempData["RoomHoursViolation"] as List<IDictionary<string, string>>;
                    int hourViolationsCount = hourViolations.Count;

                    for (int i = 0; i < hourViolationsCount; i++)
                    {
                        @:<tr>
                            @:<td>@(Html.Raw(hourViolations[i]["RoomName"]))&nbsp;</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["ExistingHoursForRoom"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewHoursForRoom"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewTotalHoursForRoom"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["MaxHoursForRoom"]).ToString("0.##"))) hours</td>
                            if (Convert.ToDouble(hourViolations[i]["NewTotalHoursForRoom"]) > Convert.ToDouble(hourViolations[i]["MaxHoursForRoom"]))
                            {
                                @:<td><b>Exceeds Max</b></td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["SingleBookingLengthViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Booking length violation:</b> Your following Bookings exceed the maximum allowed uninterrupted time for Booking lengths in these Rooms.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Room</th>
                        @:<th>Start Date</th>
                        @:<th>Start Time</th>
                        @:<th>End Date</th>
                        @:<th>End Time</th>
                        @:<th>Your Booking Length</th>
                        @:<th>Max Allowed Length</th>
                        @:<th></th>
                    @:</tr>

                    List<IDictionary<string, string>> hourViolations = TempData["SingleBookingLengthViolation"] as List<IDictionary<string, string>>;
                    int hourViolationsCount = hourViolations.Count;

                    string previousRoomName = hourViolations[0]["RoomName"];  // Used to bold text where the room name changes

                    for (int i = 0; i < hourViolationsCount; i++)
                    {
                        if (hourViolations[i]["RoomName"] != previousRoomName)
                        {
                            @:<tr><td>&nbsp;</td></tr>
                            previousRoomName = hourViolations[i]["RoomName"];
                        }
                        @:<tr>
                            @:<td>@(Html.Raw(hourViolations[i]["RoomName"]))&nbsp;</td>
                            @:<td>@(Html.Raw(hourViolations[i]["BookingStartDate"]))</td>
                            @:<td>@(Html.Raw(hourViolations[i]["BookingStartTime"]))</td>
                            @:<td>@(Html.Raw(hourViolations[i]["BookingEndDate"]))</td>
                            @:<td>@(Html.Raw(hourViolations[i]["BookingEndTime"]))</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["HoursBooked"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["MaxHoursSingleBooking"]).ToString("0.##"))) hours</td>
                            if (Convert.ToDouble(hourViolations[i]["HoursBooked"]) > Convert.ToDouble(hourViolations[i]["MaxHoursSingleBooking"]))
                            {
                                @:<td><b>Exceeds Max</b></td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["AreaBookingCountViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Maximum Booking count violation:</b> Your new Booking exceeds the maximum number of separate Bookings you are allowed to have for these Areas.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Area</th>
                        @:<th>Your Existing Bookings</th>
                        @:<th>Count of New Bookings</th>
                        @:<th>Your New Total</th>
                        @:<th>Max Allowed Total</th>
                        @:<th></th>
                    @:</tr>

                    List<IDictionary<string, string>> bookingViolations = TempData["AreaBookingCountViolation"] as List<IDictionary<string, string>>;
                    int bookingViolationsCount = bookingViolations.Count;

                    for (int i = 0; i < bookingViolationsCount; i++)
                    {
                        @:<tr>
                            @:<td>@(Html.Raw(bookingViolations[i]["AreaName"]))&nbsp;</td>
                            @:<td>@(Html.Raw(bookingViolations[i]["ExistingBookingsForArea"])) bookings</td>
                            @:<td>@(Html.Raw(bookingViolations[i]["NewBookingsForArea"])) bookings</td>
                            @:<td>@(Html.Raw(bookingViolations[i]["NewTotalBookingsForArea"])) bookings</td>
                            @:<td>@(Html.Raw(bookingViolations[i]["MaxBookingsForArea"])) bookings</td>
                            if (Convert.ToInt32(bookingViolations[i]["NewTotalBookingsForArea"]) > Convert.ToInt32(bookingViolations[i]["MaxBookingsForArea"]))
                            {
                                @:<td><b>Exceeds Max</b></td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking settings.
            @:</div>
            @:<br />
        }

        @if (TempData["BlackoutTimeViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Blackout time violation:</b> Some Rooms require a minimum blackout time between consecutive Bookings for the same User. Your new Booking violates the blackout time of your existing Bookings.<br /><br />
                @:<table style='width: 100%; padding: 5px;'>
                    @:<tr>
                        @:<th>Room&nbsp;&nbsp;</th>
                        @:<th colspan='4'>Your New Bookings</th>
                        @:<th style="width: 3%;"></th> @* Space between New bookings and Existing bookings *@
                        @:<th colspan='6'>Your Existing Bookings</th>
                    @:</tr>
                    @:<tr>
                        @:<th></th>
                        @:<th>Start&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>Start&nbsp;Time&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Time</th>
                        @:<th></th>
                        @:<th>Start&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>Start&nbsp;Time&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Time&nbsp;&nbsp;</th>
                        @:<th>Time Between Your Bookings</th>
                        @:<th>Minimum Required Blackout</th>
                    @:</tr>

                    List<RoomBooking> yourBookings = TempData["YourBookings"] as List<RoomBooking>;
                    List<RoomBooking> conflictBookings = TempData["BlackoutTimeViolation"] as List<RoomBooking>;
                    List<int> blackoutTimes = TempData["BlackoutTimeValues"] as List<int>;
                    int yourBookingsCount = yourBookings.Count;

                    string previousRoomName = yourBookings[0].Room.RoomName;  // Used to bold text where the room name changes

                    for (int i = 0; i < yourBookingsCount; i++)
                    {
                        if (yourBookings[i].Room.RoomName != previousRoomName)
                        {
                            @:<tr><td>&nbsp;</td></tr>
                            previousRoomName = yourBookings[i].Room.RoomName;
                        }
                        @:<tr>
                            @:<td>@(Html.Raw(yourBookings[i].Room.RoomName))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortDateString()))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortTimeString()))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortDateString()))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortTimeString()))&nbsp;</td>
                            @:<td></td>
                            if (conflictBookings[i] != null)
                            {
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortDateString()))&nbsp;</td>
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortTimeString()))&nbsp;</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortDateString()))&nbsp;</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortTimeString()))&nbsp;</td>
                                @:<td>@(Html.Raw(Math.Abs((yourBookings[i].StartDate - conflictBookings[i].EndDate).TotalHours).ToString("0.##"))) hours&nbsp;</td>
                                @:<td>@(Html.Raw(blackoutTimes[i].ToString("0.##"))) hours&nbsp;</td>
                            }
                            else
                            {
                                @:<td></td>
                                @:<td colspan='5'>(no violation)</td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        <div>
            <br />
            <h2>Create New Booking</h2>
            <br />
        </div>
        <div>
            <div class="container mt-0">
                <form asp-action="Create">
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="UserID" class="control-label"><strong>Full Name *</strong></label>
                        </div>
                        <div class="col-10">
                            <select asp-for="UserID" class="form-control" asp-items="ViewBag.UserID" disabled="@(ViewBag.UserIdDisabled)"></select>
                            <span asp-validation-for="UserID" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="SpecialNotes" class="control-label"><strong>Special Notes</strong></label>
                        </div>
                        <div class="col-10">
                            <textarea asp-for="SpecialNotes" class="form-control"></textarea>
                            <span asp-validation-for="SpecialNotes" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <button type="button" title="Booking Time Help" class="btn btn-sm mr-1" data-container="body" data-toggle="popover" data-placement="left"
                                    data-content="This time selection to the right sets the beginning and end time for a SINGLE booking. The date picker lets you make a booking that crosses over midnight into the next morning. This does NOT make repeat bookings. If you want to repeat a booking over several days, please use the Repeat settings on the bottom of this page.">
                                <img src="~/img/questionmark.png" width="30" height="30" />
                            </button>
                            <label asp-for="StartDate" class="control-label"><strong>Start *</strong></label>
                        </div>
                        <div class="col-5">
                            <input textmode="DateTime" id="startDateInput" asp-for="StartDate" class="form-control" />
                            <span id="startDateError" class="text-danger"></span>
                            <span asp-validation-for="StartDate" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="EndDate" class="control-label"><strong>End *</strong></label>
                        </div>
                        <div class="col-5">
                            <input textmode="DateTime" asp-for="EndDate" id="endDateInput" class="form-control" />
                            <span id="endDateError" class="text-danger"></span>
                            <span asp-validation-for="EndDate" class="text-danger"></span>
                        </div>
                    </div>
                    <br />
                    <div class="row form-group">
                        <div class="col-1 text-right" style="padding:0px">
                            @if (User.IsInRole("User"))
                            {
                                <button type="button" title="Room Selection Help" class="btn btn-sm" data-container="body" data-toggle="popover" data-placement="left"
                                        data-content="To add a Room to your Booking, first select the Area. Then select the desired Room in that Area from the dropdown list below.">
                                    <img src="~/img/questionmark.png" width="30" height="30" />
                                </button>
                            }
                            @if (User.IsInRole("Admin") || User.IsInRole("Top-level Admin"))
                            {
                                <button type="button" title="Room Selection Help" class="btn btn-sm" data-container="body" data-toggle="popover" data-placement="left"
                                        data-content="To add a Room to your Booking, first select the Area. Then select the desired Room in that Area from the listbox on the lower right, and press the ➕ button to add that Room to the Rooms you want to book. You cannot book Rooms from different Areas at the same time.">
                                    <img src="~/img/questionmark.png" width="30" height="30" />
                                </button>
                            }
                        </div>
                        <div class="col-11 text-left" style="padding-top:5px">
                            <h5>Select a Room </h5>
                        </div>
                    </div>

                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label for="RoomGroupID" class="label"><strong>Area *</strong></label>
                        </div>
                        <div class="col-10">
                            <select id="RoomGroupID" name="RoomGroupID" class="form-control" asp-items="ViewBag.RoomGroupID"></select>
                        </div>
                    </div>

                    <div id="areaDescription" class="alert alert-dark" role="alert">
                        <h6 id="areaDescription_Title">Connection Error</h6>
                        <span id="areaDescription_Body">Could not load Area description.</span>
                    </div>

                    @if (User.IsInRole("User"))
                    {
                        <div class="row form-group">
                            <div class="col-2 text-right pt-2">
                                <label asp-for="RoomID" class="label"><strong>Room *</strong></label>
                            </div>
                            <div class="col-10">
                                <select asp-for="RoomID" class="form-control" asp-items="ViewBag.RoomID">
                                    <option value="">-Select a Room-</option>
                                </select>
                                <span asp-validation-for="RoomID" class="text-danger"></span>
                            </div>
                        </div>
                    }
                    <!-- Once Identity is implemented, only show this section if the user is an Admin -->
                    @if (User.IsInRole("Admin") || User.IsInRole("Top-level Admin"))
                    {
                        <div class="row form-group">
                            <div class="col-md-6">
                                <label for="selectedOptions" class="control-label"><strong>Current Rooms to Book</strong></label> <button type="button" title="Remove Rooms from Booking" id="btnRight" class="btn btn-danger btn-sm">
                                    <strong>➖</strong>
                                </button>
                                @Html.ListBox("selectedOptions", (MultiSelectList)ViewBag.selOpts, new { @size = 10, @class = "form-control", @style = "height: 90%;" })
                                <span asp-validation-for="RoomID" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label for="availOptions" class="control-label"><strong>Add Rooms to Booking</strong></label> <button type="button" title="Add Rooms to Booking" id="btnLeft" class="btn btn-success btn-sm">
                                    <strong>➕</strong>
                                </button>
                                @Html.ListBox("availOptions", (MultiSelectList)ViewBag.availOpts, new { @size = 10, @class = "form-control", @style = "height: 90%;" })
                            </div>
                        </div>
                    }
                    <br />
                    <div class="row form-group">
                        <div class="col-1 text-right" style="padding:0px">
                            <button type="button" title="Repeating Bookings Help" class="btn btn-sm" data-container="body" data-toggle="popover" data-placement="left"
                                    data-content="If you want your Booking to be repeated over a period of time, click this checkbox. Then select how frequently you want the Booking to occur. You may choose to repeat bookings every X number of Days or Weeks until your chosen Repeat End Date, and specify which days of the week within that period should be booked.">
                                <img src="~/img/questionmark.png" width="30" height="30" />
                            </button>
                        </div>
                        <div class="col-11 text-left" style="padding-top:5px">
                            <label for="chkRepeat" class="control-label" style="font-size: 1.25rem; font-weight: 500;"><strong>Repeat?</strong></label>
                            <input type="checkbox" id="chkRepeat" name="chkRepeat" class="control-label" @Html.Raw(ViewBag.chkRepeat) data-toggle="collapse" data-target="#collapseRepeat" aria-expanded="false" aria-controls="collapseRepeat" />
                        </div>
                    </div>
                    <div class="collapse @(ViewData["RepeatContainer"])" id="collapseRepeat">
                        <div class="container">
                            <div class="row">
                                <div class="col-2 text-right">
                                    <label for="RepeatInterval" class="control-label"><strong>Every *</strong></label>
                                </div>
                                <div class="col-5">
                                    <input type="number" id="RepeatInterval" name="RepeatInterval" step="1" min="1" value="@(ViewData["RepeatInterval"])" class="form-control" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="RepeatInterval" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-5">
                                    <select id="RepeatType" name="RepeatType" class="form-control" asp-items="ViewBag.RepeatType"></select>
                                </div>
                            </div>
                            <div class="container mt-3">
                                <div class="row">
                                    <div class="col">
                                        <input type="checkbox" id="Monday" name="Monday" @Html.Raw(ViewBag.Monday) style="width: 20px; height: 20px;" />
                                    </div>
                                    <div class="col">
                                        <input type="checkbox" id="Tuesday" name="Tuesday" @Html.Raw(ViewBag.Tuesday) style="width: 20px; height: 20px;" />
                                    </div>
                                    <div class="col">
                                        <input type="checkbox" id="Wednesday" name="Wednesday" @Html.Raw(ViewBag.Wednesday) style="width: 20px; height: 20px; " />
                                    </div>
                                    <div class="col">
                                        <input type="checkbox" id="Thursday" name="Thursday" @Html.Raw(ViewBag.Thursday) style="width: 20px; height: 20px; " />
                                    </div>
                                    <div class="col">
                                        <input type="checkbox" id="Friday" name="Friday" @Html.Raw(ViewBag.Friday) style="width: 20px; height: 20px; " />
                                    </div>
                                    <div class="col">
                                        <input type="checkbox" id="Saturday" name="Saturday" @Html.Raw(ViewBag.Saturday) style="width: 20px; height: 20px; " />
                                    </div>
                                    <div class="col">
                                        <input type="checkbox" id="Sunday" name="Sunday" @Html.Raw(ViewBag.Sunday) style="width: 20px; height: 20px; " />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        <label for="Monday" class="control-label">Mon</label>
                                    </div>
                                    <div class="col">
                                        <label for="Tuesday" class="control-label">Tue</label>
                                    </div>
                                    <div class="col">
                                        <label for="Wednesday" class="control-label">Wed</label>
                                    </div>
                                    <div class="col">
                                        <label for="Thursday" class="control-label">Thu</label>
                                    </div>
                                    <div class="col">
                                        <label for="Friday" class="control-label">Fri</label>
                                    </div>
                                    <div class="col">
                                        <label for="Saturday" class="control-label">Sat</label>
                                    </div>
                                    <div class="col">
                                        <label for="Sunday" class="control-label">Sun</label>
                                    </div>
                                </div>
                            </div>
                            <div class="container">
                                <div class="row">
                                    <div class="col-2 text-right pt-2">
                                        <label for="RepeatEndDate" class="control-label"><strong>Repeat End Date*</strong></label>
                                    </div>
                                    <div class="col-5">
                                        <input type="date" id="RepeatEndDate" name="RepeatEndDate" value="@(ViewData["RepeatEndDate"])" class="form-control" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <br />
                    <div>
                        <input id="btnSubmit" type="submit" value="Create" class="btn btn-primary mx-2" style="width:100px;" />
                        <a href='@ViewData["returnURL"]' role="button" class="btn btn-secondary mx-2">Back to Bookings</a>
                    </div>
                    <br />
                </form>
            </div>
        </div>
    </section>
    </div>
</body>

<style>
    .booking_block{

    }
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/multiselect.js"></script>
    <script src="~/js/refreshListbox.js"></script>
    <script src="~/js/refreshDDL.js"></script>
    <script tye="text/javascript">
        $(function () {
            $('[data-toggle="popover"]').popover()
        })
    </script>
    <script type="text/javascript">
        // Refresh User DDL of available rooms when Area is changed
        $('#RoomGroupID').change(function () {
            var selectedRoomGroup = $("#RoomGroupID").val();
            var URL = "/RoomBookings/GetRooms/" + selectedRoomGroup;
            refreshDDL('RoomID', URL, true, "There are no Rooms available in this Area.", true, "-Select a Room-", true);
        });
        // Refresh Admin Listbox of available rooms when Area is changed
        $('#RoomGroupID').change(function () {
            var selectedRoomGroup = $("#RoomGroupID").val();
            var URL = "/RoomBookings/GetRooms/" + selectedRoomGroup;
            $("#selectedOptions").empty();  // Empty previously selected rooms because the area changed
            refreshListbox('availOptions', URL, true, 'There are no Rooms available in this Area.', true);
            $("#selectedOptions").fadeToggle(400, function () {
                $("#selectedOptions").fadeToggle(400);
            });
        });
    </script>
    <script type="text/javascript">
        // Load initial Area description when page loads
        $('document').ready(function () {
            var selectedRoomGroup = $("#RoomGroupID").val();
            var URL = "/RoomBookings/GetArea/" + selectedRoomGroup;
            $.getJSON(URL, function (data) {
                if (data !== null && !jQuery.isEmptyObject(data)) {
                    $("#areaDescription_Title").text(data.areaName);
                    $("#areaDescription_Body").html(data.description.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                } else {
                    $("#areaDescription_Title").text("Connection Error");
                    $("#areaDescription_Body").html("Could not load Area description.");
                }
            });
        });
        // Refresh Area description when Area is changed
        $('#RoomGroupID').change(function () {
            var selectedRoomGroup = $("#RoomGroupID").val();
            var URL = "/RoomBookings/GetArea/" + selectedRoomGroup;
            $.getJSON(URL, function (data) {
                if (data !== null && !jQuery.isEmptyObject(data)) {
                    $("#areaDescription_Title").text(data.areaName);
                    $("#areaDescription_Body").html(data.description.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                } else {
                    $("#areaDescription_Title").text("Connection Error");
                    $("#areaDescription_Body").html("Could not load Area description.");
                }
                $("#areaDescription").fadeToggle(400, function () {
                    $("#areaDescription").fadeToggle(400);
                });
            });
        });
    </script>
    <script>
        $("#startDateInput").change(function () {
            console.log($("#startDateInput").val());
            if ($("#startDateInput").val().length == 0 || new Date($("#startDateInput").val()) < new Date($.now())) {
                $("#startDateError").html("The start date cannot be in the past. Please select a new date/time.");
            }
            else {
                $("#startDateError").html("");
            }
        });
        $("#endDateInput").change(function () {
            console.log($("#endDateInput").val());
            if ($("#endDateInput").val().length == 0 || new Date($("#endDateInput").val()) < new Date($("#startDateInput").val())) {
                $("#endDateError").html("The end date/time must occur after the selected start date/time. Please select a new date/time.");
            }
            else {
                $("#endDateError").html("");
            }
        });
    </script>
}
