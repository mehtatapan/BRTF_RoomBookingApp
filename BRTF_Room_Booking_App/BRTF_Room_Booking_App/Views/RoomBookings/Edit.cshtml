@model BRTF_Room_Booking_App.Models.RoomBooking

@{ ViewData["Title"] = "Edit Booking"; }

<head>
    <link rel="stylesheet" href="~/css/style.css" />
</head>

<body style="background-color:#E4E6E6" class="justify-content-left">

    <br />
    <h1 class="mb-4 text-center">Edit</h1>
    <br />

    <section style="background-color: #FFF;display: block; border-radius: 8px; box-shadow: 0 15px 25px rgba(0,0,50,0.2);" class="px-5 py-2 my-3">
        
        @if (TempData["TimeConflictedBookings"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Time conflict:</b> Your updated Booking times overlap with the following existing Bookings.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Room</th>
                        @:<th colspan='4'>Your Bookings</th>
                        @:<th style="width: 4%;"></th> @* Space between User bookings and Existing bookings *@
                        @:<th colspan='5'>Existing Bookings</th>
                    @:</tr>
                    @:<tr>
                        @:<th></th>
                        @:<th>Start&nbsp;Date</th>
                        @:<th>Start&nbsp;Time</th>
                        @:<th>End&nbsp;Date</th>
                        @:<th>End&nbsp;Time</th>
                        @:<th></th>
                        @:<th>Start&nbsp;Date</th>
                        @:<th>Start&nbsp;Time</th>
                        @:<th>End&nbsp;Date</th>
                        @:<th>End&nbsp;Time</th>
                        @:<th>Booked For</th>
                    @:</tr>

                    List<RoomBooking> yourBookings = TempData["YourBookings"] as List<RoomBooking>;
                    List<RoomBooking> conflictBookings = TempData["TimeConflictedBookings"] as List<RoomBooking>;
                    int yourBookingsCount = yourBookings.Count;

                    string previousRoomName = yourBookings[0].Room.RoomName;  // Used to bold text where the room name changes

                    for (int i = 0; i < yourBookingsCount; i++)
                    {
                        if (yourBookings[i].Room.RoomName != previousRoomName)
                        {
                            @:<tr><td>&nbsp;</td></tr>
                            previousRoomName = yourBookings[i].Room.RoomName;
                        }
                        @:<tr>
                            @:<td>@(Html.Raw(yourBookings[i].Room.RoomName))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortDateString()))</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortTimeString()))</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortDateString()))</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortTimeString()))</td>
                            @:<td></td>
                            if (conflictBookings[i] != null)
                            {
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortDateString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortTimeString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortDateString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortTimeString()))</td>
                                @:<td>@(Html.Raw(conflictBookings[i].User.FullName))</td>
                            }
                            else
                            {
                                @:<td></td>
                                @:<td colspan='4'>(no conflict)</td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["AreaHoursViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Maximum Area hours violation:</b> Your updated Booking exceeds the maximum hours you are allowed to book for these Areas.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Area&nbsp;</th>
                        @:<th>Original Booking Duration&nbsp;</th>
                        @:<th>Original Total Bookings in Area&nbsp;</th>
                        @:<th>Updated Booking Duration&nbsp;</th>
                        @:<th>Updated Total Bookings in Area&nbsp;</th>
                        @:<th>Max Allowed Total&nbsp;</th>
                        @:<th></th>
                    @:</tr>

                    List<IDictionary<string, string>> hourViolations = TempData["AreaHoursViolation"] as List<IDictionary<string, string>>;
                    int hourViolationsCount = hourViolations.Count;

                    for (int i = 0; i < hourViolationsCount; i++)
                    {
                        @:<tr>
                            @:<td>@(Html.Raw(hourViolations[i]["AreaName"]))&nbsp;</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["PreviousBookingDuration"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["PreviousTotalHoursForArea"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewBookingDuration"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewTotalHoursForArea"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["MaxHoursForArea"]).ToString("0.##"))) hours</td>
                            if (Convert.ToDouble(hourViolations[i]["NewTotalHoursForArea"]) > Convert.ToDouble(hourViolations[i]["MaxHoursForArea"]))
                            {
                                @:<td><b>Exceeds Max</b></td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["RoomHoursViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Maximum Room hours violation:</b> Your updated Booking exceeds the maximum hours you are allowed to book for these Rooms.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Room&nbsp;</th>
                        @:<th>Original Booking Duration&nbsp;</th>
                        @:<th>Original Total Bookings in Room&nbsp;</th>
                        @:<th>Updated Booking Duration&nbsp;</th>
                        @:<th>Updated Total Bookings in Room&nbsp;</th>
                        @:<th>Max Allowed Total&nbsp;</th>
                        @:<th></th>
                    @:</tr>

                    List<IDictionary<string, string>> hourViolations = TempData["RoomHoursViolation"] as List<IDictionary<string, string>>;
                    int hourViolationsCount = hourViolations.Count;

                    for (int i = 0; i < hourViolationsCount; i++)
                    {
                        @:<tr>
                            @:<td>@(Html.Raw(hourViolations[i]["RoomName"]))&nbsp;</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["PreviousBookingDuration"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["PreviousTotalHoursForRoom"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewBookingDuration"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewTotalHoursForRoom"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["MaxHoursForRoom"]).ToString("0.##"))) hours</td>
                            if (Convert.ToDouble(hourViolations[i]["NewTotalHoursForRoom"]) > Convert.ToDouble(hourViolations[i]["MaxHoursForRoom"]))
                            {
                                @:<td><b>Exceeds Max</b></td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["SingleBookingLengthViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Booking length violation:</b> Your updated Booking exceeds the maximum allowed uninterrupted time for Booking lengths in these Areas.<br /><br />
                @:<table style='width:100%;'>
                    @:<tr>
                        @:<th>Area</th>
                        @:<th>Original Booking Length</th>
                        @:<th>Updated Booking Length</th>
                        @:<th>Max Allowed Length</th>
                        @:<th></th>
                    @:</tr>

                    List<IDictionary<string, string>> hourViolations = TempData["SingleBookingLengthViolation"] as List<IDictionary<string, string>>;
                    int hourViolationsCount = hourViolations.Count;

                    for (int i = 0; i < hourViolationsCount; i++)
                    {
                        @:<tr>
                            @:<td>@(Html.Raw(hourViolations[i]["AreaName"]))&nbsp;</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["PreviousBookingDuration"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["NewBookingDuration"]).ToString("0.##"))) hours</td>
                            @:<td>@(Html.Raw(Convert.ToDouble(hourViolations[i]["MaxHoursSingleBooking"]).ToString("0.##"))) hours</td>
                            if (Convert.ToDouble(hourViolations[i]["NewBookingDuration"]) > Convert.ToDouble(hourViolations[i]["MaxHoursSingleBooking"]))
                            {
                                @:<td><b>Exceeds Max</b></td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }

        @if (TempData["BlackoutTimeViolation"] != null)
        {
            @:<br />
            @:<div class="alert alert-danger text-left text-body">
                @:<b>Blackout time violation:</b> Some Rooms require a minimum blackout time between consecutive Bookings for the same User. Your updated Booking violates the blackout time of your existing Bookings.<br /><br />
                @:<table style='width:100%; padding: 5px;'>
                    @:<tr>
                        @:<th>Room&nbsp;&nbsp;</th>
                        @:<th colspan='4'>Updated Booking</th>
                        @:<th style="width: 3%;"></th> @* Space between New bookings and Existing bookings *@
                        @:<th colspan='6'>Violated Existing Booking</th>
                    @:</tr>
                    @:<tr>
                        @:<th></th>
                        @:<th>Start&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>Start&nbsp;Time&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Time</th>
                        @:<th></th>
                        @:<th>Start&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>Start&nbsp;Time&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Date&nbsp;&nbsp;</th>
                        @:<th>End&nbsp;Time&nbsp;&nbsp;</th>
                        @:<th>Time Between Your Bookings</th>
                        @:<th>Minimum Required Blackout</th>
                    @:</tr>

                    List<RoomBooking> yourBookings = TempData["YourBookings"] as List<RoomBooking>;
                    List<RoomBooking> conflictBookings = TempData["BlackoutTimeViolation"] as List<RoomBooking>;
                    List<int> blackoutTimes = TempData["BlackoutTimeValues"] as List<int>;
                    int yourBookingsCount = yourBookings.Count;

                    for (int i = 0; i < yourBookingsCount; i++)
                    {
                        @:<tr>
                            @:<td>@(Html.Raw(yourBookings[i].Room.RoomName))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortDateString()))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].StartDate.ToShortTimeString()))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortDateString()))&nbsp;</td>
                            @:<td>@(Html.Raw(yourBookings[i].EndDate.ToShortTimeString()))&nbsp;</td>
                            @:<td></td>
                            if (conflictBookings[i] != null)
                            {
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortDateString()))&nbsp;</td>
                                @:<td>@(Html.Raw(conflictBookings[i].StartDate.ToShortTimeString()))&nbsp;</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortDateString()))&nbsp;</td>
                                @:<td>@(Html.Raw(conflictBookings[i].EndDate.ToShortTimeString()))&nbsp;</td>
                                @:<td>@(Html.Raw(Math.Abs((yourBookings[i].StartDate - conflictBookings[i].EndDate).TotalHours).ToString("0.##"))) hours&nbsp;</td>
                                @:<td>@(Html.Raw(blackoutTimes[i].ToString("0.##"))) hours&nbsp;</td>
                            }
                            else
                            {
                                @:<td></td>
                                @:<td colspan='5'>(no violation)</td>
                            }
                        @:</tr>
                    }
                @:</table><br />
                @:Please adjust your Booking times.
            @:</div>
            @:<br />
        }
        
        <div>
            <br />
            <h4 class="text-center">Edit this Booking</h4>
            <br />
        </div>
        <div>
            <div class="container">

                <form asp-action="Edit">
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="UserID" class="label">Full Name *</label>
                        </div>
                        <div class="col-10">
                            <select asp-for="UserID" class="form-control" asp-items="ViewBag.UserID" disabled="@(ViewBag.UserIdDisabled)"></select>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="SpecialNotes" class="label">Special Notes</label>
                        </div>
                        <div class="col-10">
                            <textarea asp-for="SpecialNotes" class="form-control"></textarea>
                            <span asp-validation-for="SpecialNotes" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="StartDate" class="label">Start *</label>
                        </div>
                        <div class="col-5">
                            <input asp-for="StartDate" id="startDateInput" class="form-control" />
                            <span id="startDateError" class="text-danger"></span>
                            <span asp-validation-for="StartDate" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="EndDate" class="label">End *</label>
                        </div>
                        <div class="col-5">
                            <input asp-for="EndDate" id="endDateInput" class="form-control" />
                            <span id="endDateError" class="text-danger"></span>
                            <span asp-validation-for="EndDate" class="text-danger"></span>
                        </div>
                    </div>
                    <br />
                    <div class="row form-group">
                        <div class="col-1 text-right" style="padding:0px">
                            <button type="button" title="Room Selection Help" class="btn btn-sm" data-container="body" data-toggle="popover" data-placement="left" data-content="To add a Room to your Booking, first select the Area. You will then be able to select the desired Room in that Area from the Dropdown below.">
                                <img src="~/img/questionmark.png" width="30" height="30" />
                            </button>
                        </div>
                        <div class="col-11 text-left" style="padding-top:5px">
                            <h5>Select a Room</h5>
                        </div>
                    </div>

                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label for="RoomGroupID" class="label">Area *</label>
                        </div>
                        <div class="col-10">
                            <select id="RoomGroupID" name="RoomGroupID" class="form-control" asp-items="ViewBag.RoomGroupID"></select>
                        </div>
                    </div>

                    <div id="areaDescription" class="alert alert-dark text-center" role="alert">
                        <h6 id="areaDescription_Title">Connection Error</h6>
                        <span id="areaDescription_Body">Could not load Area description.</span>
                    </div>

                    <div class="row form-group">
                        <div class="col-2 text-right pt-2">
                            <label asp-for="RoomID" class="label">Room *</label>
                        </div>
                        <div class="col-10">
                            <select asp-for="RoomID" class="form-control" asp-items="ViewBag.RoomID"></select>
                            <span asp-validation-for="RoomID" class="text-danger"></span>
                        </div>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <br />
                    <div class="d-flex justify-content-center">
                        <input type="submit" value="Save" class="btn btn-primary mx-2" style="width:100px;" />
                        <a href='@ViewData["returnURL"]' role="button" class="btn btn-secondary mx-2">Back to Bookings</a>
                    </div>
                    <br />
                </form>
            </div>
        </div>
    </section>
    <br />
</body>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/refreshDDL.js"></script>
    <script type="text/javascript">
        // Refresh DDL of available rooms when Area is changed
        $('#RoomGroupID').change(function () {
            var selectedRoomGroup = $("#RoomGroupID").val();
            var URL = "/RoomBookings/GetRooms/" + selectedRoomGroup;
            refreshDDL('RoomID', URL, true, "There are no Rooms available in this Area.", true, "-Select a Room-", true);
        });

    </script>
    <script type="text/javascript">
        // Load initial Area description when page loads
        $('document').ready(function () {
            var selectedRoomGroup = $("#RoomGroupID").val();
            var URL = "/RoomBookings/GetArea/" + selectedRoomGroup;
            $.getJSON(URL, function (data) {
                if (data !== null && !jQuery.isEmptyObject(data)) {
                    $("#areaDescription_Title").text(data.areaName);
                    $("#areaDescription_Body").html(data.description.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                } else {
                    $("#areaDescription_Title").text("Connection Error");
                    $("#areaDescription_Body").html("Could not load Area description.");
                }
            });
        });
        // Refresh Area description when Area is changed
        $('#RoomGroupID').change(function () {
            var selectedRoomGroup = $("#RoomGroupID").val();
            var URL = "/RoomBookings/GetArea/" + selectedRoomGroup;
            $.getJSON(URL, function (data) {
                if (data !== null && !jQuery.isEmptyObject(data)) {
                    $("#areaDescription_Title").text(data.areaName);
                    $("#areaDescription_Body").html(data.description.replace(/(?:\r\n|\r|\n)/g, '<br />'));
                } else {
                    $("#areaDescription_Title").text("Connection Error");
                    $("#areaDescription_Body").html("Could not load Area description.");
                }
                $("#areaDescription").fadeToggle(400, function () {
                    $("#areaDescription").fadeToggle(400);
                });
            });
        });
    </script>
    <script tye="text/javascript">
        $(function () {
            $('[data-toggle="popover"]').popover()
        })
    </script>
    <script>
        $("#startDateInput").change(function () {
            console.log($("#startDateInput").val());
            if ($("#startDateInput").val().length == 0 || new Date($("#startDateInput").val()) < new Date($.now())) {
                $("#startDateError").html("The start date cannot be in the past. Please select a new date/time.");
            }
            else {
                $("#startDateError").html("");
            }
        });
        $("#endDateInput").change(function () {
            console.log($("#endDateInput").val());
            if ($("#endDateInput").val().length == 0 || new Date($("#endDateInput").val()) < new Date($("#startDateInput").val())) {
                $("#endDateError").html("The end date/time must occur after the selected start date/time. Please select a new date/time.");
            }
            else {
                $("#endDateError").html("");
            }
        });
    </script>
}
